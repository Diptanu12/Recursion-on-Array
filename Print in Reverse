Print in Reverse
Given an integer n denoting number of elements in linked list. And then we are given n integers where the ith integer denoted ith element of linked list. We need to print the linked list in reverse i.e from tail to head.

Your task is to complete the function reverse which receives the head of the linked list as parameter and prints the linked list in reverse order.

Input Format
The First line of input contains a single integer n denoting size of linked list The Second line contains n integers where ith integer denotes ith element of linked list

Output Format
Ouput linked list in reverse order i.e from last node(tail) to head node

Example 1
Input

5
2 6 8 10 1
Output:

1 10 8 6 2
Example 2
Input

6
1 2 3 4 5 6
Output:

6 5 4 3 2 1
Constraints:
1 <= n <= 5*10^3

Topics
Linked Lists
Companies


import java.util.*;
import java.io.*;

class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
}
public class Main {
    public static void reverse(Node head){
       //  // write code here
       //   Node curr = head;
       //  Node prev = null;
       //  while(curr!=null){
       //      Node nextNode=curr.next;
       //      curr.next=prev;

       //      prev=curr;
       //      curr=nextNode;
            
       //  }
       //  head.next=null;
       //  head=prev;

       //  while(head != null) {
       //    System.out.print(head.data +" ");
       //    head = head.next;
       // }
  // public static void reverse(Node head){

    //     Node curr = head;
    //     Node prev = null;

    //     while(curr != null) {
    //         Node next = curr.next;
    //         curr.next = prev;
    //         prev = curr;
    //         curr = next;
    //     }

    //     head = prev;

    //     while(head != null) {
    //         System.out.print(head.data +" ");
    //         head = head.next;
    //     }
        
    // }
       if (head == null || head.next == null) {
            return ; 
        }

        Stack<Integer> st = new Stack<>();
        Node temp = head;

        while (temp != null) {
            st.push(temp.data);
            temp = temp.next;
        }

        temp = head;

    
        while (temp != null) {
            temp.data = st.pop();
            temp = temp.next;
        }

        temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println(); 

        
    }
 public static void main(String args[]) {
    Scanner input = new Scanner(System.in);
    LinkedList list = new LinkedList();
    int n = input.nextInt();
    for (int i = 0; i < n; i++) {
        int x = input.nextInt();
        list.add(x);
    }
    reverse(list.head);
}
}
